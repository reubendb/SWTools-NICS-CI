#!/bin/ksh

############################## standard interface to /sw tools
# Input:
#   Environment variables
#     SW_BLDDIR    current directory (PWD) minus /autofs/na1_ stuff
#     SW_ENVFILE   file to be sourced which has alternate prog environment
#                     only to be used in special circumstances
#     SW_WORKDIR   work dir that local script can use
# Output:
#   Return code of 0=success or 1=failure   or 2=job submitted
#
# Notes:
#   If this script is called from swtest, then swtest requires 
#   SW_WORKDIR to be set.  Then swtest adds a unique path to what 
#   user gave swtest (action+timestamp+build) and provides this
#   script with a uniquely valued SW_WORKDIR.  swtest will
#   automatically remove this unique workspace when retest is done.
##################################################################

# exit 3 is a signal to the sw infrastructure that this template has not 
# been updated; please delete it when ready
#exit 3

if [ -z $SW_BLDDIR ]; then
  echo "Error: SW_BLDDIR not set!"
  exit 1
else
  cd $SW_BLDDIR
fi

if [ -z $SW_ENVFILE ]; then
  ### Set Environment (do not remove this line only change what is in between)
  . ${MODULESHOME}/init/ksh
  . ${SW_BLDDIR}/remodule
  ### End Environment (do not remove this line only change what is in between)
else
  . $SW_ENVFILE
fi

############################## app specific section
#  
set -o verbose
#clear out status file since re-testing
rm -f status 


#-- Use one of the following template: in-place test or test with batch job

#-- 2. test with batch job
cp /sw/testcases/${PACKAGE}/* ${SW_WORKDIR}

cd ${SW_WORKDIR}

cat > ${PACKAGE}.pbs << EOF
#!/bin/bash
#PBS -N ${PACKAGE}
#PBS -j oe
#PBS -l nodes=1,walltime=01:00:00
#PBS -A UT-SUPPORT
#PBS -W group_list=install
#PBS -W umask=002

set -o verbose
cd \$PBS_O_WORKDIR

ROOT=$SW_BLDDIR/$SRCDIR
cp \$ROOT/testing/testing_dgemm.cpp .

icc -O3 -DADD_ -Wall -DHAVE_MIC -I/opt/intel/mic/coi/include -I/usr/include/intel-coi -I\$ROOT/testing -I\$ROOT/include -I\$ROOT/control -c testing_dgemm.cpp -o testing_dgemm.o

if [ \$? -ne 0 ] ; then
  echo "$PACKAGE compile failed"
  echo unverified > $SW_BLDDIR/status
  exit 1
fi

icc   testing_dgemm.o -o testing_dgemm \
        \$ROOT/testing/libtest.a \$ROOT/testing/lin/liblapacktest.a -L\$ROOT/lib -lmicmagma \
        -L$MKLROOT/lib/intel64 -L$MKLROOT/../compiler/lib/intel64 -L/opt/intel/mic/coi/host-linux-release/lib \
        -lscif -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -lpthread -liomp5 -lcoi_host

if [ \$? -ne 0 ] ; then
  echo "$PACKAGE link failed"
  echo unverified > $SW_BLDDIR/status
  exit 1
fi

export MAGMA_PATH=\$ROOT
./testing_dgemm -c 2>&1 | tee test.log
if [ \$? -ne 0 ] ; then 
  echo "$PACKAGE link failed"
  echo unverified > $SW_BLDDIR/status
  exit 1
fi

mic_gflops=\$(tail -n 1 test.log | awk '{print \$4}')
cpu_gflops=\$(tail -n 1 test.log | awk '{print \$6}')

if [ \$(echo "\$mic_gflops < \$cpu_gflops" | bc) -eq 1 ]; then
  echo unverified > $SW_BLDDIR/status
else
  echo verified > $SW_BLDDIR/status
fi
chmod 664 $SW_BLDDIR/status

JOBID=\`echo \$PBS_JOBID | cut -d "." -f1 \`
cat \$PBS_JOBNAME.o\$JOBID >> ${SW_BLDDIR}/test.log
chmod 664 ${SW_BLDDIR}/test.log

rm -f ${SW_BLDDIR}/.running
EOF

#submit job and touch .running file - marker to infrastructure that
qsub ${PACKAGE}.pbs > ${SW_BLDDIR}/.running
if [ $? -ne 0 ] ; then
  echo "Error submitting job"
  rm -f .running
  exit 1
else
  echo "Job submitted"
  cat ${SW_BLDDIR}/.running
  exit 2
fi

cd ../

############################### if this far, return 0
exit 0
